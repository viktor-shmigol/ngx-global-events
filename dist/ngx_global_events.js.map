{"version":3,"file":"ngx_global_events.js","sourceRoot":"","sources":["../src/ngx_global_events.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;;;yBAIf,EAAE;;IAE3B,mCAAS,GAAT,UAAU,KAAa;QAAvB,iBAOC;QAPwB,kBAAuB;aAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;YAAvB,iCAAuB;;QAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC5B;QACD,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC,CAAC,CAAC;KACJ;IAED,qCAAW,GAAX,UAAY,KAAa,EAAE,OAAkB;QAC3C,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,KAAK,CAAC;SACd;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC;SACb;QAED,IAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,KAAK,CAAC;SACd;QAED,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEf,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,MAAM,CAAC,IAAI,CAAC;KACb;IAED,iCAAO,GAAP,UAAQ,KAAa;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACnC,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,IAAI,CAAC;SACb;QAED,IAAM,SAAS,GAAU,EAAE,CAAC;QAC5B,CAAC,CAAC,OAAO,CAAC,UAAC,OAAY;YACrB,SAAS,CAAC,IAAI,CAAC,OAAO,eAAI,IAAI,EAAE,CAAC;SAClC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC;KAClB;;gBAlDF,UAAU;;0BAFX;;SAGa,eAAe","sourcesContent":["import { Injectable } from '@angular/core'\n\n@Injectable()\nexport class NgxGlobalEvents {\n  private _channels: any = [];\n\n  subscribe(topic: string, ...handlers: Function[]) {\n    if (!this._channels[topic]) {\n      this._channels[topic] = [];\n    }\n    handlers.forEach((handler) => {\n      this._channels[topic].push(handler);\n    });\n  }\n\n  unsubscribe(topic: string, handler?: Function) {\n    const t = this._channels[topic];\n    if (!t) {\n      return false;\n    }\n\n    if (!handler) {\n      delete this._channels[topic];\n      return true;\n    }\n\n    const i = t.indexOf(handler);\n\n    if (i < 0) {\n      return false;\n    }\n\n    t.splice(i, 1);\n\n    if (!t.length) {\n      delete this._channels[topic];\n    }\n\n    return true;\n  }\n\n  publish(topic: string, ...args: any[]) {\n    const t = this._channels[topic];\n    if (!t) {\n      return null;\n    }\n\n    const responses: any[] = [];\n    t.forEach((handler: any) => {\n      responses.push(handler(...args));\n    });\n    return responses;\n  }\n}\n"]}